{"version":3,"sources":["MapChart.js","App.js","index.js"],"names":["memo","setTooltipContent","setActiveCountry","useState","countries","setCountries","useEffect","axios","get","then","res","data","Countries","Global","Date","data-tip","projectionConfig","scale","geography","geographies","map","geo","key","rsmKey","onMouseEnter","properties","NAME","POP_EST","countryFound","find","el","Country","err","onClick","undefined","oldArr","onMouseLeave","style","default","fill","outline","hover","pressed","rounded","num","Math","round","App","content","setContent","activeCountries","href","id","className","NewConfirmed","NewDeaths","NewRecovered","TotalConfirmed","TotalRecovered","toLocaleString","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92593b7a.chunk.js","sourcesContent":["import React, { memo, useEffect, useState } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography\n} from \"react-simple-maps\";\n\nimport axios from 'axios';\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst MapChart = ({ setTooltipContent, setActiveCountry }) => {\n\n    const [countries, setCountries] = useState([]);\n    \n    useEffect(() => {\n      axios.get('https://api.covid19api.com/summary')\n        .then(res => {\n          const {\n            Countries,\n            Global,\n            Date\n          } = res.data;\n          setCountries(Countries)\n        })\n    }, []);\n    \n  return (\n    <>\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\n        <ZoomableGroup>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map(geo => (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  onMouseEnter={() => {\n                    const { NAME, POP_EST } = geo.properties;\n                    try{\n                      const countryFound = countries.find(el => el.Country === NAME);\n                      setTooltipContent(countryFound);\n                    }catch(err){\n                      setTooltipContent('Not available')\n                    }\n                  }}\n                  onClick={() => {\n                    const { NAME, POP_EST } = geo.properties;\n                    try{\n                      const countryFound = countries.find(el => el.Country === NAME);\n                      if(countryFound !== undefined){\n                        setActiveCountry(oldArr => [...oldArr, countryFound]);\n                      }\n                      \n                    }catch(err){\n                      setActiveCountry('Data not available')\n                    }\n                  }}\n                  onMouseLeave={() => {\n                    setTooltipContent('');\n                  }}\n                  style={{\n                    default: {\n                      fill: \"black\",\n                      outline: \"none\"\n                    },\n                    hover: {\n                      fill: \"blue\",\n                      outline: \"none\"\n                    },\n                    pressed: {\n                      fill: \"red\",\n                      outline: \"none\"\n                    }\n                  }}\n                />\n              ))\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);","import React, { useState } from 'react';\nimport ReactTooltip from 'react-tooltip';\n\nimport MapChart from './MapChart';\nimport { BarChart, XAxis, YAxis, Label, CartesianGrid, Tooltip, Legend, Bar, LineChart, Line, ResponsiveContainer } from 'recharts';\n\nimport { AiFillGithub } from 'react-icons/ai';\n\nimport './styles.css'\n\n// const [content, setContent] = useState(\"\");\n\n\nconst rounded = num => {\n    if (num > 1000000000) {\n      return Math.round(num / 100000000) / 10 + \"Bn\";\n    } else if (num > 1000000) {\n      return Math.round(num / 100000) / 10 + \"M\";\n    } else if (num > 1000) {\n        return Math.round(num / 100) / 10 + \"K\";\n    } else {\n        return num;\n    }\n};\n\nconst App = () => {\n    const [content, setContent] = useState('');\n    const [activeCountries, setActiveCountry] = useState([]);\n    \n    return (\n        <div>\n            <nav>\n                <a href=\"#map\" id=\"title\"><h1 >Covid 19 Tracker by Chris Cosentino</h1></a>\n                <div className=\"nav-links\">\n                    \n                    <a href=\"#new\" className=\"nav-link\">New Cases</a>\n                    <a href=\"#total\" className=\"nav-link\">Total Cases</a>\n                    <a href=\"https://github.com/ChrisCosentino\" className=\"github-icon\"><AiFillGithub id=\"icon\" /></a>\n                </div>\n                \n            </nav>\n            \n            <section id=\"map\">\n                <MapChart setTooltipContent={setContent} setActiveCountry={setActiveCountry} className=\"map\"  />\n                <ReactTooltip>\n                    {content\n                    ? \n                    <div>\n                        <h1>{content.Country}</h1>\n                        <table>\n                            <tbody>\n                                <tr>\n                                    <th>New Confirmed</th>\n                                    <td>{rounded(content.NewConfirmed)}</td>\n                                </tr>\n                                <tr>\n                                    <th>New Deaths</th>\n                                    <td>{rounded(content.NewDeaths)}</td>\n                                </tr>\n                                <tr>\n                                    <th>New Recovered</th>\n                                    <td>{rounded(content.NewRecovered)}</td>\n                                </tr>\n                                <tr>\n                                    <th>Total Confirmed</th>\n                                    <td>{rounded(content.TotalConfirmed)}</td>\n                                </tr>\n                                <tr>\n                                    <th>Total Recovered</th>\n                                    <td>{rounded(content.TotalRecovered)}</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        <div>Valid as of: {new Date(content.Date).toLocaleString()}</div>\n                    </div>\n                    : \n                    <div>Not Found</div>\n                    }\n                </ReactTooltip>\n            </section>\n\n            <div>\n                {activeCountries \n                ?\n                <div>\n                <div id=\"new\">\n                    <h1>New Cases</h1>\n                    <section id=\"linechart\">\n                        <ResponsiveContainer width=\"95%\" height={250}>\n                            <LineChart data={activeCountries}\n                                margin={{ top: 0, right: 0, left: 0, bottom: 0 }}>\n                                <CartesianGrid strokeDasharray=\"3 3\" />\n                                <XAxis dataKey=\"Country\"></XAxis>\n                                <YAxis />\n                                <Tooltip />\n                                <Legend />\n                                <Line type=\"monotone\" dataKey=\"NewConfirmed\" stroke=\"#6666FF\" />\n                                <Line type=\"monotone\" dataKey=\"NewDeaths\" stroke=\"#5cb85c\" />\n                                <Line type=\"monotone\" dataKey=\"NewRecovered\" stroke=\"#FF6633\" />\n                            </LineChart>\n                        </ResponsiveContainer>\n                    </section>\n                    <section id=\"barchart\">\n                        <ResponsiveContainer width=\"95%\" height={250}>\n                            <BarChart data={activeCountries}>\n                                <CartesianGrid strokeDasharray=\"3 3\" />\n                                <XAxis dataKey=\"Country\"></XAxis>\n                                <YAxis />\n                                <Tooltip />\n                                <Legend />\n                                <Bar dataKey=\"NewConfirmed\" fill=\"#6666FF\" />\n                                <Bar dataKey=\"NewDeaths\" fill=\"#5cb85c\" />\n                                <Bar dataKey=\"NewRecovered\" fill=\"#FF6633\" />\n                            </BarChart>\n                        </ResponsiveContainer>\n                    </section>\n                </div>\n                <div id=\"total\">\n                    <h1>Total Cases</h1>\n                    <section id=\"linechart\">\n                        <ResponsiveContainer width=\"95%\" height={250}>\n                            <LineChart data={activeCountries}\n                                margin={{ top: 0, right: 0, left: 0, bottom: 0 }}>\n                                <CartesianGrid strokeDasharray=\"3 3\" />\n                                <XAxis dataKey=\"Country\"></XAxis>\n                                <YAxis />\n                                <Tooltip />\n                                <Legend />\n                                <Line type=\"monotone\" dataKey=\"TotalConfirmed\" stroke=\"#6666FF\" />\n                                <Line type=\"monotone\" dataKey=\"TotalRecovered\" stroke=\"#5cb85c\" />\n                            </LineChart>\n                        </ResponsiveContainer>\n                    </section>\n                    <section id=\"barchart\">\n                        <ResponsiveContainer width=\"95%\" height={250}>\n                            <BarChart data={activeCountries}>\n                                <CartesianGrid strokeDasharray=\"3 3\" />\n                                <XAxis dataKey=\"Country\"></XAxis>\n                                <YAxis />\n                                <Tooltip />\n                                <Legend />\n                                <Bar dataKey=\"TotalConfirmed\" fill=\"#6666FF\" />\n                                <Bar dataKey=\"TotalRecovered\" fill=\"#5cb85c\" />\n                            </BarChart>\n                        </ResponsiveContainer>\n                    </section>\n                </div>\n                </div>\n                :\n                <div>\n\n                </div>\n                }\n            </div>\n        </div>\n    )\n\n\n\n}\n\n\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}